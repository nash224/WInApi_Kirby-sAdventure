GameEngineRenderer 클래스는 액터가 렌더러를 생성하고 렌더러에 텍스처나 스프라이트를 지정해 정해진 크기만큼 화면에 특정 이미지를 출력한다.
GameEngineRenderer 는 애니메이션을 관리하기도 한다.
렌더러의 렌더링은 CoreUpdate() >> ActorRender() >> MainCamera->Render() >> Render->Render() 순서로 렌더된다.

렌더러 생성은 특정 액터에서 생성되고 자료구조 AllRenderer 변수에 관리되며, GameEngineActor 소멸자에서 메모리가 제거된다. 

렌더러는 매개변수에 따라 애니메이션의 정보를 생성하고 보관한다.
먼저 스프라이트를 지정하고 크기, 시간 간격, 반복의 여부로 생성된다. 
애니메이션은 자료구조 std::<string, GameEngineRenderer::Animation> AllAnimation 에 보관된다.

AllAnimation 으로 특정 애니메이션을 찾을 수 있으며, 재생중인 행동 중에 애니메이션을 바꿀 수 있다.
그리고 애니메이션이 끝났는지, 몇 번째 프레임인지 확인 가능하다.
 

렌더러의 렌더 로직은 텍스처 렌더부터 시작된다.
텍스처의 렌더 위치는 플레이어 위치에 카메라 위치를 빼줘서 화면에 상대적으로 나타난다.
화면에 출력하기위해 HDC를 얻고 폰트 핸들을 저장하는 HFONT 을 선언한다.
LOGFONTA 는 폰트의 속성을 지정하는 구조체로 크기, 기울기, 정밀도, 패밀리 등과 같은 속성을 저장하고 있다. 이때 0을 넣어주면 모두 기본값으로 설정된다.
폰트 설정을 했으면 lstrcpy(LPTSTR, LPCTSTR) 를 넣어 원본 폰트를 설정값으로 복사해준다.
그리고 CreateFontIndirect(&LOGFONTA) 로 폰트 핸들을 생성해 반환해준다.
SelectObject(HDC, HGDIOBJ) 로 펜, 브러시, 폰트를 선택해주고,
SetTextColor(HDC, Color) 색을 지정 후,
SetBkMode(HDC, int) 로 폰트 배경을 어느 것으로 할 지 설정해준다. (TRANSPARENT 로 지정하면 투명하게 출력) 

 그리고 출력 범위로 RECT 를 만들어 범위를 지정하고,
DrawTextA(HDC, LPCTSTR, int, LPRECT, UINT) 로 멀티바이트 문자열을 출력해줄 수 있다.
그리고 DeleteOBject(HGDIOBJ) 를 통해 메모리에서 제거된다.

다음으로 애니메이션과 텍스처를 렌더하게 된다.
애니메이션이 없을 경우 텍스처를 렌더하고,
애니메이션이 있다면 지정된 순서와 시간만큼 렌더를 한다.

마지막으로 레벨에서 오버된 객체의 렌더러는 레벨 카메라에 옮겨줘야 한다.
SetOrder(int) 로 자신이 속한 카메라의 Renderers 에서 렌더러를 제거하고, 
다음 레벨 카메라의 Renderers 에 넣어준다.


멤버변수)
1. GameEngineRenderer

	GameEngineCamera* Camera,
	GameEngineWindowTexture* Texture,
	GameEngineSprite* Sprite,
	float ScaleRatio,
	bool ScaleCheck,
	float4 RenderPos,
	float4 RenderScale,
	float4 CopyPos,
	float4 CopyScale,
	CameraType CameraTypeValue,
	std::string Text,
	std::map<std::string, Animation> AllAnimation,
	Animation* CurAnimation


2. GameEngineRenderer::Animation

		GameEngineSprite* Sprite,
		size_t CurFrame,
		size_t StartFrame,
		size_t EndFrame,
		float CurInter,
		std::vector<size_t> Frames,
		std::vector<float> Inters,
		bool Loop,
		bool IsEnd,

3. Text

	std::string Face,
	int TextScale