변수 기반 코딩

======================================================


빨리 구현하는방법

시작위치 -> 도착위치 /// 함수의 기능

해근섐은 함수를 만들때, 인터페이스부터 작성하고 구현

1) 프로젝트 안에 리소스 파일 만들어주기

2) 파일경로 추출하는것

=======================================================



엔진 부분만큼 사용자가 만지지못하게 막는거이 좋음


유니티 메뉴얼 보고 전체적인 구조 순위(게임 흐름도)



게임 계획 세울것


헤더에 헤더를 많이 추가하면 순환 참조 문제가 발생함



=======================================================



프로젝트 만드는법
=> 빈 프로젝트 만들기(솔루션 이름 바꿔도 됨)
=> 자주 쓰는 헤더 가져오기
=> 기존적인 프로젝트 LEVEL 평가
=> platform(windows, Linux , Ect..) => 솔루션 구성 text 도 함께
=> LEVEL3 부터는 컨텐츠 부분 (게임 말단적인 부분) -> 내가 구현해야할 위치시작
=> LEVEL4 에 합체



프로젝트 구성형식바꿀것

window.h가 안되는 이유
옵션 -> 링커-> 시스템 -> 하위시스템 => 창


**빌드를 편하게 하기
빌드를 하면 디버그 파일이 남게 됨 x64\debug\..

모든 플랫폼으로
빌드 결과 위치 바꾸기
모든 프로젝트 선택 -> 구성 속성 -> 일반 -> 일반속성 -> 출력 디렉터리 -> 메크로 변경
솔루션 디렉터리 뒤에 Bin\ 추가

중간 디렉터리
끝에 $ProjectName/


프로젝트 종속성 추가
솔루션 속성 페이지 -> 공용 속성-> 프로젝트 종속성
각 하위프로젝트를 상위프로젝트 종속시키지기

(최신 빌드기능)
모든 프로젝트 속성 -> c/c++ -> 다중 프로레서 컴파일 (y)



완벽한 코트를 쳤는대도 에러가 나면 'Bin' 을 지울것
-> 그래도 안되면 진짜 에러


기능을 모아 객체지향으로 만듬


속성 -> 일반 -> 고급 -> 문자집합 -> 멀티바이트


특정 함

============



서류 > 기술면접(느낌을 봄) > 인성면접(이사 or 사장 면접) => 밝은 모습

즐겁게 개발하기

블로그, 깃허브

질문 전에 생각하고 질문 ㄱㄱ
정해진 시간(30분~1시간)에 문제가 해결되지 않으면 질문 ㄱㄱ
=> 다른사람의 피드백을 들어보면 좋음

다른 사람의 코드 마음껏 베껴라

템플릿이 연속되면 내부를 생각하지 마라

const를 써서 값의 변경을 예방하기

변수 초기화하기

메모리 구조를 생각하면서 구현하기

명시적으로 코드 작성할 것 => 개발자의 안목을 키우기 위해서

어느 함수를 쓰던간에 구조를 알고 쓰기 => 내가 사용하는건 모르는게 있어서는 안됨

using namespace는 명시적이지 않기 때문에 비추천

다운 캐스팅은 문제가 개발할때 없어도 하다가 터질수 있다.

편하게 test할 환경 구성

여러가지 언어를 배우는건 독이된다

자료구조의 함수를 사용할때 리턴값이 존재하는지 보기

정답은 문법만 있다. => 문법에 맞춰 제작한다면 뭐든 정답

너무 깊게 공부할 필요는 없음 => 요구를 하면 그때 공부 ㄱㄱ

메모리 보는 독해력 키우기

출력창 읽을줄 알아야함

지금 미래지향적인 생각은 접어두기

게임은 데드타임에 돌아간다

